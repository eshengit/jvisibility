{"total_count": 90, "traces": [{"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park(CoroutineScheduler.kt:)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark(CoroutineScheduler.kt:)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:)\n": 8}, "thread_name": "DefaultDispatcher-worker-", "total_count": 8, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xa> (a java.util.concurrent.ForkJoinPool)\n\tat java.util.concurrent.locks.LockSupport.parkUntil(java.base@../LockSupport.java:)\n\tat java.util.concurrent.ForkJoinPool.awaitWork(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.ForkJoinPool.runWorker(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.ForkJoinWorkerThread.run(java.base@../ForkJoinWorkerThread.java:)\n": 8}, "thread_name": "JobScheduler FJ pool /", "total_count": 8, "trace_variation_count": 1}, {"trace_map": {"": 8}, "thread_name": "GC Thread#", "total_count": 8, "trace_variation_count": 1}, {"trace_map": {"": 7}, "thread_name": "G Refine#", "total_count": 7, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xa> (a java.util.concurrent.SynchronousQueue$TransferStack)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat java.util.concurrent.SynchronousQueue$TransferStack.transfer(java.base@../SynchronousQueue.java:)\n\tat java.util.concurrent.SynchronousQueue.poll(java.base@../SynchronousQueue.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 5}, "thread_name": "ApplicationImpl pooled thread ", "total_count": 5, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat java.lang.ProcessHandleImpl.waitForProcessExit(java.base@../Native Method)\n\tat java.lang.ProcessHandleImpl$.run(java.base@../ProcessHandleImpl.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 4}, "thread_name": "process reaper", "total_count": 4, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n   No compile task\n": 2}, "thread_name": "C CompilerThread", "total_count": 2, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat sun.nio.ch.KQueue.poll(java.base@../Native Method)\n\tat sun.nio.ch.KQueueSelectorImpl.doSelect(java.base@../KQueueSelectorImpl.java:)\n\tat sun.nio.ch.SelectorImpl.lockAndDoSelect(java.base@../SelectorImpl.java:)\n\t- locked <xd> (a io.netty.channel.nio.SelectedSelectionKeySet)\n\t- locked <xe> (a sun.nio.ch.KQueueSelectorImpl)\n\tat sun.nio.ch.SelectorImpl.select(java.base@../SelectorImpl.java:)\n\tat io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:)\n\tat io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$.run(SingleThreadEventExecutor.java:)\n\tat io.netty.util.internal.ThreadExecutorMap$.run(ThreadExecutorMap.java:)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1, "   java.lang.Thread.State: RUNNABLE\n\tat sun.nio.ch.KQueue.poll(java.base@../Native Method)\n\tat sun.nio.ch.KQueueSelectorImpl.doSelect(java.base@../KQueueSelectorImpl.java:)\n\tat sun.nio.ch.SelectorImpl.lockAndDoSelect(java.base@../SelectorImpl.java:)\n\t- locked <xaf> (a io.netty.channel.nio.SelectedSelectionKeySet)\n\t- locked <xab> (a sun.nio.ch.KQueueSelectorImpl)\n\tat sun.nio.ch.SelectorImpl.select(java.base@../SelectorImpl.java:)\n\tat io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:)\n\tat io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$.run(SingleThreadEventExecutor.java:)\n\tat io.netty.util.internal.ThreadExecutorMap$.run(ThreadExecutorMap.java:)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "Netty Builtin Server ", "total_count": 2, "trace_variation_count": 2}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.Object.wait(java.base@../Object.java:)\n\tat java.lang.ProcessImpl.waitFor(java.base@../ProcessImpl.java:)\n\t- locked <xab> (a java.lang.ProcessImpl)\n\tat com.intellij.execution.process.ProcessWaitFor.lambda$new$(ProcessWaitFor.java:)\n\tat com.intellij.execution.process.ProcessWaitFor$$Lambda$/xea.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.execution.process.ProcessWaitFor.lambda$new$(ProcessWaitFor.java:)\n\tat com.intellij.execution.process.ProcessWaitFor$$Lambda$/xdaf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1, "   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.Object.wait(java.base@../Object.java:)\n\tat java.lang.ProcessImpl.waitFor(java.base@../ProcessImpl.java:)\n\t- locked <xd> (a java.lang.ProcessImpl)\n\tat com.intellij.execution.process.ProcessWaitFor.lambda$new$(ProcessWaitFor.java:)\n\tat com.intellij.execution.process.ProcessWaitFor$$Lambda$/xea.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.execution.process.ProcessWaitFor.lambda$new$(ProcessWaitFor.java:)\n\tat com.intellij.execution.process.ProcessWaitFor$$Lambda$/xdaf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "java", "total_count": 2, "trace_variation_count": 2}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat java.io.FileInputStream.readBytes(java.base@../Native Method)\n\tat java.io.FileInputStream.read(java.base@../FileInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\t- locked <xaba> (a java.lang.ProcessImpl$ProcessPipeInputStream)\n\tat sun.nio.cs.StreamDecoder.readBytes(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.implRead(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.read(java.base@../StreamDecoder.java:)\n\t- locked <xabae> (a com.intellij.util.io.BaseInputStreamReader)\n\tat java.io.InputStreamReader.read(java.base@../InputStreamReader.java:)\n\tat java.io.Reader.read(java.base@../Reader.java:)\n\tat com.intellij.util.io.BaseOutputReader.readAvailableBlocking(BaseOutputReader.java:)\n\tat com.intellij.util.io.BaseDataReader.readAvailable(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader.doRun(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xfc.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.util.io.BaseDataReader.lambda$start$(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1, "   java.lang.Thread.State: RUNNABLE\n\tat java.io.FileInputStream.readBytes(java.base@../Native Method)\n\tat java.io.FileInputStream.read(java.base@../FileInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\t- locked <xde> (a java.lang.ProcessImpl$ProcessPipeInputStream)\n\tat sun.nio.cs.StreamDecoder.readBytes(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.implRead(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.read(java.base@../StreamDecoder.java:)\n\t- locked <xde> (a com.intellij.util.io.BaseInputStreamReader)\n\tat java.io.InputStreamReader.read(java.base@../InputStreamReader.java:)\n\tat java.io.Reader.read(java.base@../Reader.java:)\n\tat com.intellij.util.io.BaseOutputReader.readAvailableBlocking(BaseOutputReader.java:)\n\tat com.intellij.util.io.BaseDataReader.readAvailable(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader.doRun(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xfc.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.util.io.BaseDataReader.lambda$start$(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "BaseDataReader: error stream of java", "total_count": 2, "trace_variation_count": 2}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat java.io.FileInputStream.readBytes(java.base@../Native Method)\n\tat java.io.FileInputStream.read(java.base@../FileInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\t- locked <xace> (a java.lang.ProcessImpl$ProcessPipeInputStream)\n\tat sun.nio.cs.StreamDecoder.readBytes(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.implRead(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.read(java.base@../StreamDecoder.java:)\n\t- locked <xaced> (a com.intellij.util.io.BaseInputStreamReader)\n\tat java.io.InputStreamReader.read(java.base@../InputStreamReader.java:)\n\tat java.io.Reader.read(java.base@../Reader.java:)\n\tat com.intellij.util.io.BaseOutputReader.readAvailableBlocking(BaseOutputReader.java:)\n\tat com.intellij.util.io.BaseDataReader.readAvailable(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader.doRun(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xfc.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.util.io.BaseDataReader.lambda$start$(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1, "   java.lang.Thread.State: RUNNABLE\n\tat java.io.FileInputStream.readBytes(java.base@../Native Method)\n\tat java.io.FileInputStream.read(java.base@../FileInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\t- locked <xdb> (a java.lang.ProcessImpl$ProcessPipeInputStream)\n\tat sun.nio.cs.StreamDecoder.readBytes(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.implRead(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.read(java.base@../StreamDecoder.java:)\n\t- locked <xd> (a com.intellij.util.io.BaseInputStreamReader)\n\tat java.io.InputStreamReader.read(java.base@../InputStreamReader.java:)\n\tat java.io.Reader.read(java.base@../Reader.java:)\n\tat com.intellij.util.io.BaseOutputReader.readAvailableBlocking(BaseOutputReader.java:)\n\tat com.intellij.util.io.BaseDataReader.readAvailable(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader.doRun(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xfc.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.util.io.BaseDataReader.lambda$start$(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "BaseDataReader: output stream of java", "total_count": 2, "trace_variation_count": 2}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <x> (a java.util.concurrent.SynchronousQueue$TransferStack)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat java.util.concurrent.SynchronousQueue$TransferStack.transfer(java.base@../SynchronousQueue.java:)\n\tat java.util.concurrent.SynchronousQueue.poll(java.base@../SynchronousQueue.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 2}, "thread_name": "I/O pool ", "total_count": 2, "trace_variation_count": 1}, {"trace_map": {"": 2}, "thread_name": "G Conc#", "total_count": 2, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <x> (a kotlinx.coroutines.BlockingCoroutine)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:)\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:)\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\n\tat com.intellij.idea.Main.main(Main.kt:)\n": 1}, "thread_name": "main", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat java.lang.ref.Reference.waitForReferencePendingList(java.base@../Native Method)\n\tat java.lang.ref.Reference.processPendingReferences(java.base@../Reference.java:)\n\tat java.lang.ref.Reference$ReferenceHandler.run(java.base@../Reference.java:)\n": 1}, "thread_name": "Reference Handler", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\t- locked <xa> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(java.base@../Finalizer.java:)\n": 1}, "thread_name": "Finalizer", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n": 1}, "thread_name": "Signal Dispatcher", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n": 1}, "thread_name": "Service Thread", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n": 1}, "thread_name": "Monitor Deflation Thread", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n": 1}, "thread_name": "Sweeper thread", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\t- locked <xe> (a java.lang.ref.ReferenceQueue$Lock)\n\tat jdk.internal.ref.CleanerImpl.run(java.base@../CleanerImpl.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n\tat jdk.internal.misc.InnocuousThread.run(java.base@../InnocuousThread.java:)\n": 1}, "thread_name": "Common-Cleaner", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n": 1}, "thread_name": "Notification Thread", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\t- locked <xfb> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\tat kotlinx.coroutines.debug.internal.ConcurrentWeakMap.runWeakRefQueueCleaningLoopUntilInterrupted(ConcurrentWeakMap.kt:)\n\tat kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$.invoke(DebugProbesImpl.kt:)\n\tat kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$.invoke(DebugProbesImpl.kt:)\n\tat kotlin.concurrent.ThreadsKt$thread$thread$.run(Thread.kt:)\n": 1}, "thread_name": "Coroutines Debugger Cleaner", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.Object.wait(java.base@../Object.java:)\n\tat java.util.TimerThread.mainLoop(java.base@../Timer.java:)\n\t- locked <xfa> (a java.util.TaskQueue)\n\tat java.util.TimerThread.run(java.base@../Timer.java:)\n": 1}, "thread_name": "Timer-", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n": 1}, "thread_name": "AWT-AppKit", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\t- locked <x> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\tat com.sun.jna.internal.Cleaner$.run(Cleaner.java:)\n": 1}, "thread_name": "JNA Cleaner", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n": 1}, "thread_name": "Attach Listener", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.Object.wait(java.base@../Object.java:)\n\tat sun.awt.AWTAutoShutdown.run(java.desktop/AWTAutoShutdown.java:)\n\t- locked <x> (a java.lang.Object)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "AWT-Shutdown", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xfa> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.util.concurrent.DelayQueue.take(java.base@../DelayQueue.java:)\n\tat com.intellij.util.concurrency.AppDelayQueue$TransferThread.run(AppDelayQueue.java:)\n": 1}, "thread_name": "Periodic tasks thread", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xee> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.park(java.base@../LockSupport.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.ForkJoinPool.managedBlock(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.awt.EventQueue.getNextEvent(java.desktop/EventQueue.java:)\n\tat com.intellij.ide.IdeEventQueue.lambda$getNextEvent$(IdeEventQueue.java:)\n\tat com.intellij.ide.IdeEventQueue$$Lambda$/xe.compute(Unknown Source)\n\tat com.intellij.openapi.application.impl.ApplicationImpl.runUnlockingIntendedWrite(ApplicationImpl.java:)\n\tat com.intellij.ide.IdeEventQueue.getNextEvent(IdeEventQueue.java:)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(java.desktop/EventDispatchThread.java:)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(java.desktop/EventDispatchThread.java:)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(java.desktop/EventDispatchThread.java:)\n\tat java.awt.EventDispatchThread.pumpEvents(java.desktop/EventDispatchThread.java:)\n\tat java.awt.EventDispatchThread.pumpEvents(java.desktop/EventDispatchThread.java:)\n\tat java.awt.EventDispatchThread.run(java.desktop/EventDispatchThread.java:)\n": 1}, "thread_name": "AWT-EventQueue-", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat sun.javad.metal.MTLRenderQueue$QueueFlusher.run(java.desktop/MTLRenderQueue.java:)\n\t- locked <xfa> (a sun.javad.metal.MTLRenderQueue$QueueFlusher)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "JavaD Queue Flusher", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\t- locked <xee> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\tat sun.javad.Disposer.run(java.desktop/Disposer.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "JavaD Disposer", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xa> (a java.util.concurrent.SynchronousQueue$TransferStack)\n\tat java.util.concurrent.locks.LockSupport.park(java.base@../LockSupport.java:)\n\tat java.util.concurrent.SynchronousQueue$TransferStack$SNode.block(java.base@../SynchronousQueue.java:)\n\tat java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.ForkJoinPool.managedBlock(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.SynchronousQueue$TransferStack.transfer(java.base@../SynchronousQueue.java:)\n\tat java.util.concurrent.SynchronousQueue.take(java.base@../SynchronousQueue.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "AWTThreading pool--thread-", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <x> (a java.lang.ProcessImpl)\n\tat java.lang.Object.wait(java.base@../Object.java:)\n\tat java.lang.ProcessImpl.waitFor(java.base@../ProcessImpl.java:)\n\t- locked <x> (a java.lang.ProcessImpl)\n\tat com.intellij.execution.process.ProcessWaitFor.lambda$new$(ProcessWaitFor.java:)\n\tat com.intellij.execution.process.ProcessWaitFor$$Lambda$/xea.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.execution.process.ProcessWaitFor.lambda$new$(ProcessWaitFor.java:)\n\tat com.intellij.execution.process.ProcessWaitFor$$Lambda$/xdaf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "fsnotifier", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat java.io.FileInputStream.readBytes(java.base@../Native Method)\n\tat java.io.FileInputStream.read(java.base@../FileInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\t- locked <xc> (a java.lang.ProcessImpl$ProcessPipeInputStream)\n\tat sun.nio.cs.StreamDecoder.readBytes(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.implRead(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.read(java.base@../StreamDecoder.java:)\n\t- locked <xcc> (a com.intellij.util.io.BaseInputStreamReader)\n\tat java.io.InputStreamReader.read(java.base@../InputStreamReader.java:)\n\tat java.io.Reader.read(java.base@../Reader.java:)\n\tat com.intellij.util.io.BaseOutputReader.readAvailableBlocking(BaseOutputReader.java:)\n\tat com.intellij.util.io.BaseDataReader.readAvailable(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader.doRun(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xfc.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.util.io.BaseDataReader.lambda$start$(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "BaseDataReader: output stream of fsnotifier", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat java.io.FileInputStream.readBytes(java.base@../Native Method)\n\tat java.io.FileInputStream.read(java.base@../FileInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\tat java.io.BufferedInputStream.read(java.base@../BufferedInputStream.java:)\n\t- locked <xaf> (a java.lang.ProcessImpl$ProcessPipeInputStream)\n\tat sun.nio.cs.StreamDecoder.readBytes(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.implRead(java.base@../StreamDecoder.java:)\n\tat sun.nio.cs.StreamDecoder.read(java.base@../StreamDecoder.java:)\n\t- locked <xa> (a com.intellij.util.io.BaseInputStreamReader)\n\tat java.io.InputStreamReader.read(java.base@../InputStreamReader.java:)\n\tat java.io.Reader.read(java.base@../Reader.java:)\n\tat com.intellij.util.io.BaseOutputReader.readAvailableBlocking(BaseOutputReader.java:)\n\tat com.intellij.util.io.BaseDataReader.readAvailable(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader.doRun(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xfc.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.util.io.BaseDataReader.lambda$start$(BaseDataReader.java:)\n\tat com.intellij.util.io.BaseDataReader$$Lambda$/xf.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "BaseDataReader: error stream of fsnotifier", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xf> (a kotlinx.coroutines.DefaultExecutor)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat kotlinx.coroutines.DefaultExecutor.run(DefaultExecutor.kt:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "kotlinx.coroutines.DefaultExecutor", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xabfff> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.util.concurrent.LinkedBlockingQueue.poll(java.base@../LinkedBlockingQueue.java:)\n\tat com.intellij.build.output.BuildOutputInstantReaderImpl.doReadLine(BuildOutputInstantReaderImpl.kt:)\n\tat com.intellij.build.output.BuildOutputInstantReaderImpl.readerRunnable$lambda$(BuildOutputInstantReaderImpl.kt:)\n\tat com.intellij.build.output.BuildOutputInstantReaderImpl$$Lambda$/xffdeb.run(Unknown Source)\n\tat com.intellij.util.ConcurrencyUtil.runUnderThreadName(ConcurrencyUtil.java:)\n\tat com.intellij.util.ConcurrencyUtil.lambda$underThreadNameRunnable$(ConcurrencyUtil.java:)\n\tat com.intellij.util.ConcurrencyUtil$$Lambda$/xbaa.run(Unknown Source)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(java.base@../Executors.java:)\n\tat java.util.concurrent.FutureTask.run(java.base@../FutureTask.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$$.run(java.base@../Executors.java:)\n\tat java.security.AccessController.executePrivileged(java.base@../AccessController.java:)\n\tat java.security.AccessController.doPrivileged(java.base@../AccessController.java:)\n\tat java.util.concurrent.Executors$PrivilegedThreadFactory$.run(java.base@../Executors.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "Reader thread for BuildOutputInstantReaderImpl@,,", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xe> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.util.concurrent.DelayQueue.take(java.base@../DelayQueue.java:)\n\tat javax.swing.TimerQueue.run(java.desktop/TimerQueue.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "TimerQueue", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.Object.wait(java.base@../Object.java:)\n\tat java.util.TimerThread.mainLoop(java.base@../Timer.java:)\n\t- locked <x> (a java.util.TaskQueue)\n\tat java.util.TimerThread.run(java.base@../Timer.java:)\n": 1}, "thread_name": "rd throttler", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xadb> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(java.base@../LockSupport.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(java.base@../ScheduledThreadPoolExecutor.java:)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(java.base@../ScheduledThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "RMI Scheduler()", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat java.lang.ref.ReferenceQueue.remove(java.base@../ReferenceQueue.java:)\n\t- locked <xadd> (a java.lang.ref.ReferenceQueue$Lock)\n\tat sun.rmi.transport.DGCClient$EndpointEntry$RenewCleanThread.run(java.rmi@../DGCClient.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "RMI RenewClean-[...:]", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(java.base@../Native Method)\n\t- waiting on <no object reference available>\n\tat sun.rmi.transport.GC$Daemon.run(java.rmi@../GC.java:)\n\t- locked <xadff> (a sun.rmi.transport.GC$LatencyLock)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n\tat jdk.internal.misc.InnocuousThread.run(java.base@../InnocuousThread.java:)\n": 1}, "thread_name": "RMI GC Daemon", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: RUNNABLE\n\tat sun.nio.ch.KQueue.poll(java.base@../Native Method)\n\tat sun.nio.ch.KQueuePort$EventHandlerTask.poll(java.base@../KQueuePort.java:)\n\tat sun.nio.ch.KQueuePort$EventHandlerTask.run(java.base@../KQueuePort.java:)\n\tat sun.nio.ch.AsynchronousChannelGroupImpl$.run(java.base@../AsynchronousChannelGroupImpl.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "Process Proxy: Main", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"   java.lang.Thread.State: WAITING (parking)\n\tat jdk.internal.misc.Unsafe.park(java.base@../Native Method)\n\t- parking to wait for  <xd> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.park(java.base@../LockSupport.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.util.concurrent.ForkJoinPool.unmanagedBlock(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.ForkJoinPool.managedBlock(java.base@../ForkJoinPool.java:)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(java.base@../AbstractQueuedSynchronizer.java:)\n\tat java.util.concurrent.LinkedBlockingQueue.take(java.base@../LinkedBlockingQueue.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@../ThreadPoolExecutor.java:)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@../ThreadPoolExecutor.java:)\n\tat java.lang.Thread.run(java.base@../Thread.java:)\n": 1}, "thread_name": "MVStore Serialization", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"": 1}, "thread_name": "VM Thread", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"": 1}, "thread_name": "G Main Marker", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"": 1}, "thread_name": "G Service", "total_count": 1, "trace_variation_count": 1}, {"trace_map": {"": 1}, "thread_name": "VM Periodic Task Thread", "total_count": 1, "trace_variation_count": 1}], "total_thread_group_count": 49, "deadlock_trace": "Found one Java-level deadlock:\n=============================\n\"Thread-0\":\n  waiting to lock monitor 0x000000002334a280 (object 0x00000000c7a49f40,\n     a java.lang.Object),\n  which is held by \"Thread-1\"\n\"Thread-1\":\n  waiting to lock monitor 0x000000002334a480 (object 0x00000000c7a49f30,\n     a java.lang.Object),\n  which is held by \"Thread-0\"\nJava stack information for the threads listed above:\n===================================================\n\"Thread-0\":\n  at SimpleDeadLock$Thread1.run(SimpleDeadLock.java:23)\n  - waiting to lock <0x00000000c7a49f40> (a java.lang.Object)\n  - locked <0x00000000c7a49f30> (a java.lang.Object)\n\"Thread-1\":\n  at SimpleDeadLock$Thread2.run(SimpleDeadLock.java:36)\n  - waiting to lock <0x00000000c7a49f30> (a java.lang.Object)\n  - locked <0x00000000c7a49f40> (a java.lang.Object)\nFound 1 deadlock.\n"}

